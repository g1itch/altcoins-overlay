diff --git a/src/rpcclient.cpp b/src/rpcclient.cpp
index 399421b1..0c690cda 100644
--- a/src/rpcclient.cpp
+++ b/src/rpcclient.cpp
@@ -39,10 +39,10 @@ Object CallRPC(const std::string& strMethod, const Array& params)
 
     // Connect to localhost
     bool fUseSSL = GetBoolArg("-rpcssl", false);
-    ba::io_service io_service;
+    ioContext io_context;
     ba::ssl::context context(ba::ssl::context::sslv23);
     context.set_options(ba::ssl::context::no_sslv2);
-    ba::ssl::stream<ba::ip::tcp::socket> sslStream(io_service, context);
+    ba::ssl::stream<ba::ip::tcp::socket> sslStream(io_context, context);
     SSLIOStreamDevice<ba::ip::tcp> d(sslStream, fUseSSL);
     boost::iostreams::stream< SSLIOStreamDevice<ba::ip::tcp> > stream(d);
 
diff --git a/src/rpcprotocol.h b/src/rpcprotocol.h
index a5da6fef..5d29f2bc 100644
--- a/src/rpcprotocol.h
+++ b/src/rpcprotocol.h
@@ -21,6 +21,18 @@
 #include "json/json_spirit_utils.h"
 #include "json/json_spirit_writer_template.h"
 
+// Boost Support for 1.70+
+#if BOOST_VERSION >= 107000
+    #define GetIOService(s) ((boost::asio::io_context&)(s).get_executor().context())
+    #define GetIOServiceFromPtr(s) ((boost::asio::io_context&)(s->get_executor().context())) // this one
+    typedef boost::asio::io_context ioContext;
+
+#else
+    #define GetIOService(s) ((s).get_io_service())
+    #define GetIOServiceFromPtr(s) ((s)->get_io_service())
+    typedef boost::asio::io_service ioContext;
+#endif
+
 // HTTP status codes
 enum HTTPStatusCode
 {
@@ -103,7 +115,7 @@ public:
     }
     bool connect(const std::string& server, const std::string& port)
     {
-        boost::asio::ip::tcp::resolver resolver(stream.get_io_service());
+        boost::asio::ip::tcp::resolver resolver(GetIOService(stream));
         boost::asio::ip::tcp::resolver::query query(server.c_str(), port.c_str());
         boost::asio::ip::tcp::resolver::iterator endpoint_iterator = resolver.resolve(query);
         boost::asio::ip::tcp::resolver::iterator end;
diff --git a/src/rpcserver.cpp b/src/rpcserver.cpp
index d4da32e9..5c51832a 100644
--- a/src/rpcserver.cpp
+++ b/src/rpcserver.cpp
@@ -34,7 +34,7 @@ namespace ba = boost::asio;
 static std::string strRPCUserColonPass;
 
 // These are created by StartRPCThreads, destroyed in StopRPCThreads
-static ba::io_service* rpc_io_service = NULL;
+static ioContext* rpc_io_service = NULL;
 static std::map<std::string, boost::shared_ptr<ba::deadline_timer> > deadlineTimers;
 static ba::ssl::context* rpc_ssl_context = NULL;
 static boost::thread_group* rpc_worker_group = NULL;
@@ -445,10 +445,10 @@ class AcceptedConnectionImpl : public AcceptedConnection
 {
 public:
     AcceptedConnectionImpl(
-            ba::io_service& io_service,
+            ioContext& io_context,
             ba::ssl::context &context,
             bool fUseSSL) :
-        sslStream(io_service, context),
+        sslStream(io_context, context),
         _d(sslStream, fUseSSL),
         _stream(_d)
     {
@@ -496,7 +496,7 @@ static void RPCListen(boost::shared_ptr<ba::basic_socket_acceptor<Protocol> > ac
                    const bool fUseSSL)
 {
     // Accept connection
-    AcceptedConnectionImpl<Protocol>* conn = new AcceptedConnectionImpl<Protocol>(acceptor->get_io_service(), context, fUseSSL);
+    AcceptedConnectionImpl<Protocol>* conn = new AcceptedConnectionImpl<Protocol>(GetIOServiceFromPtr(acceptor), context, fUseSSL);
 
     acceptor->async_accept(
             conn->sslStream.lowest_layer(),
@@ -582,7 +582,7 @@ void StartRPCThreads()
     }
 
     assert(rpc_io_service == NULL);
-    rpc_io_service = new ba::io_service();
+    rpc_io_service = new ioContext();
     rpc_ssl_context = new ba::ssl::context(ba::ssl::context::sslv23);
 
     const bool fUseSSL = GetBoolArg("-rpcssl", false);
@@ -664,7 +664,7 @@ void StartRPCThreads()
 
     rpc_worker_group = new boost::thread_group();
     for (int i = 0; i < GetArg("-rpcthreads", 4); i++)
-        rpc_worker_group->create_thread(boost::bind(&ba::io_service::run, rpc_io_service));
+        rpc_worker_group->create_thread(boost::bind(&ioContext::run, rpc_io_service));
 }
 
 void StopRPCThreads()
