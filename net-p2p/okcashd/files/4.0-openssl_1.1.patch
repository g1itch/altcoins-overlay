diff --git a/src/bignum.h b/src/bignum.h
index 94bbe740..c6586388 100644
--- a/src/bignum.h
+++ b/src/bignum.h
@@ -11,6 +11,7 @@
 #include "version.h"
 
 #include <openssl/bn.h>
+#include <openssl/opensslv.h>  // For using openssl 1.0 and 1.1 branches.
 
 #include <stdexcept>
 #include <vector>
@@ -52,38 +53,79 @@ public:
     bool operator!() { return (pctx == NULL); }
 };
 
-
-/** C++ wrapper for BIGNUM (OpenSSL bignum) */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+/** C++ wrapper for BIGNUM (OpenSSL 1.0 bignum) */
 class CBigNum : public BIGNUM
 {
+#else
+/** C++ wrapper for BIGNUM (OpenSSL 1.1 bignum) */
+class CBigNum
+{
+protected:
+    BIGNUM *bn;
+
+    void CBigNum_init()
+    {
+        bn = BN_secure_new();
+    }
+#endif
 public:
     CBigNum()
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         BN_init(this);
+#else
+        CBigNum_init();
+#endif
     }
 
     CBigNum(const CBigNum& b)
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         BN_init(this);
         if (!BN_copy(this, &b))
         {
             BN_clear_free(this);
             throw bignum_error("CBigNum::CBigNum(const CBigNum&) : BN_copy failed");
         }
+#else
+        CBigNum_init();
+        if (!BN_copy(bn, &b))
+        {
+            BN_clear_free(bn);
+            throw bignum_error("CBigNum::CBigNum(const CBigNum&) : BN_copy failed");
+        }
+#endif
     }
 
     CBigNum& operator=(const CBigNum& b)
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         if (!BN_copy(this, &b))
+#else
+        if (!BN_copy(bn, &b))
+#endif
             throw bignum_error("CBigNum::operator= : BN_copy failed");
         return (*this);
     }
 
     ~CBigNum()
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         BN_clear_free(this);
+#else
+        BN_clear_free(bn);
+#endif
+    }
+
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    BIGNUM *operator &() const
+    {
+        return bn;
     }
+#endif
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     //CBigNum(char n) is not portable.  Use 'signed char' or 'unsigned char'.
     CBigNum(signed char n)        { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }
     CBigNum(short n)              { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }
@@ -96,10 +138,28 @@ public:
     CBigNum(unsigned long n)      { BN_init(this); setulong(n); }
     CBigNum(unsigned long long n) { BN_init(this); setuint64(n); }
     explicit CBigNum(uint256 n)   { BN_init(this); setuint256(n); }
+#else
+    //CBigNum(char n) is not portable.  Use 'signed char' or 'unsigned char'.
+    CBigNum(signed char n)        { CBigNum_init(); if (n >= 0) setulong(n); else setint64(n); }
+    CBigNum(short n)              { CBigNum_init(); if (n >= 0) setulong(n); else setint64(n); }
+    CBigNum(int n)                { CBigNum_init(); if (n >= 0) setulong(n); else setint64(n); }
+    CBigNum(long n)               { CBigNum_init(); if (n >= 0) setulong(n); else setint64(n); }
+    CBigNum(long long n)          { CBigNum_init(); setint64(n); }
+    CBigNum(unsigned char n)      { CBigNum_init(); setulong(n); }
+    CBigNum(unsigned short n)     { CBigNum_init(); setulong(n); }
+    CBigNum(unsigned int n)       { CBigNum_init(); setulong(n); }
+    CBigNum(unsigned long n)      { CBigNum_init(); setulong(n); }
+    CBigNum(unsigned long long n) { CBigNum_init(); setuint64(n); }
+    explicit CBigNum(uint256 n)   { CBigNum_init(); setuint256(n); }
+#endif
 
     explicit CBigNum(const std::vector<unsigned char>& vch)
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         BN_init(this);
+#else
+        CBigNum_init();
+#endif
         setvch(vch);
     }
 
@@ -136,30 +196,52 @@ public:
      * @return the size
      */
     int bitSize() const{
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         return  BN_num_bits(this);
+#else
+        return  BN_num_bits(bn);
+#endif
     }
 
 
     void setulong(unsigned long n)
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         if (!BN_set_word(this, n))
             throw bignum_error("CBigNum conversion from unsigned long : BN_set_word failed");
+#else
+        if (!BN_set_word(bn, n))
+            throw bignum_error("CBigNum conversion from unsigned long : BN_set_word failed");
+#endif
     }
 
     unsigned long getulong() const
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         return BN_get_word(this);
+#else
+        return BN_get_word(bn);
+#endif
     }
 
     unsigned int getuint() const
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         return BN_get_word(this);
+#else
+        return BN_get_word(bn);
+#endif
     }
 
     int getint() const
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         unsigned long n = BN_get_word(this);
         if (!BN_is_negative(this))
+#else
+        unsigned long n = BN_get_word(bn);
+        if (!BN_is_negative(bn))
+#endif
             return (n > (unsigned long)std::numeric_limits<int>::max() ? std::numeric_limits<int>::max() : n);
         else
             return (n > (unsigned long)std::numeric_limits<int>::max() ? std::numeric_limits<int>::min() : -(int)n);
@@ -206,16 +288,28 @@ public:
         pch[1] = (nSize >> 16) & 0xff;
         pch[2] = (nSize >> 8) & 0xff;
         pch[3] = (nSize) & 0xff;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         BN_mpi2bn(pch, p - pch, this);
+#else
+        BN_mpi2bn(pch, p - pch, bn);
+#endif
     }
 
     uint64_t getuint64()
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         unsigned int nSize = BN_bn2mpi(this, NULL);
+#else
+        unsigned int nSize = BN_bn2mpi(bn, NULL);
+#endif
         if (nSize < 4)
             return 0;
         std::vector<unsigned char> vch(nSize);
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         BN_bn2mpi(this, &vch[0]);
+#else
+        BN_bn2mpi(bn, &vch[0]);
+#endif
         if (vch.size() > 4)
             vch[4] &= 0x7f;
         uint64_t n = 0;
@@ -248,7 +342,11 @@ public:
         pch[1] = (nSize >> 16) & 0xff;
         pch[2] = (nSize >> 8) & 0xff;
         pch[3] = (nSize) & 0xff;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         BN_mpi2bn(pch, p - pch, this);
+#else
+        BN_mpi2bn(pch, p - pch, bn);
+#endif
     }
 
     void setuint256(uint256 n)
@@ -276,16 +374,28 @@ public:
         pch[1] = (nSize >> 16) & 0xff;
         pch[2] = (nSize >> 8) & 0xff;
         pch[3] = (nSize >> 0) & 0xff;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         BN_mpi2bn(pch, p - pch, this);
+#else
+        BN_mpi2bn(pch, p - pch, bn);
+#endif
     }
 
     uint256 getuint256() const
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         unsigned int nSize = BN_bn2mpi(this, NULL);
+#else
+        unsigned int nSize = BN_bn2mpi(bn, NULL);
+#endif
         if (nSize < 4)
             return 0;
         std::vector<unsigned char> vch(nSize);
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         BN_bn2mpi(this, &vch[0]);
+#else
+        BN_bn2mpi(bn, &vch[0]);
+#endif
         if (vch.size() > 4)
             vch[4] &= 0x7f;
         uint256 n = 0;
@@ -307,16 +417,28 @@ public:
         vch2[3] = (nSize >> 0) & 0xff;
         // swap data to big endian
         reverse_copy(vch.begin(), vch.end(), vch2.begin() + 4);
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         BN_mpi2bn(&vch2[0], vch2.size(), this);
+#else
+        BN_mpi2bn(&vch2[0], vch2.size(), bn);
+#endif
     }
 
     std::vector<unsigned char> getvch() const
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         unsigned int nSize = BN_bn2mpi(this, NULL);
+#else
+        unsigned int nSize = BN_bn2mpi(bn, NULL);
+#endif
         if (nSize <= 4)
             return std::vector<unsigned char>();
         std::vector<unsigned char> vch(nSize);
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         BN_bn2mpi(this, &vch[0]);
+#else
+        BN_bn2mpi(bn, &vch[0]);
+#endif
         vch.erase(vch.begin(), vch.begin() + 4);
         reverse(vch.begin(), vch.end());
         return vch;
@@ -330,16 +452,28 @@ public:
         if (nSize >= 1) vch[4] = (nCompact >> 16) & 0xff;
         if (nSize >= 2) vch[5] = (nCompact >> 8) & 0xff;
         if (nSize >= 3) vch[6] = (nCompact >> 0) & 0xff;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         BN_mpi2bn(&vch[0], vch.size(), this);
+#else
+        BN_mpi2bn(&vch[0], vch.size(), bn);
+#endif
         return *this;
     }
 
     unsigned int GetCompact() const
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         unsigned int nSize = BN_bn2mpi(this, NULL);
+#else
+        unsigned int nSize = BN_bn2mpi(bn, NULL);
+#endif
         std::vector<unsigned char> vch(nSize);
         nSize -= 4;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         BN_bn2mpi(this, &vch[0]);
+#else
+        BN_bn2mpi(bn, &vch[0]);
+#endif
         unsigned int nCompact = nSize << 24;
         if (nSize >= 1) nCompact |= (vch[4] << 16);
         if (nSize >= 2) nCompact |= (vch[5] << 8);
@@ -383,22 +517,47 @@ public:
         CBigNum bnBase = nBase;
         CBigNum bn0 = 0;
         std::string str;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         CBigNum bn = *this;
         BN_set_negative(&bn, false);
+#else
+        CBigNum bn1 = *this;
+        BN_set_negative(&bn1, false);
+#endif
         CBigNum dv;
         CBigNum rem;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         if (BN_cmp(&bn, &bn0) == 0)
+#else
+        if (BN_cmp(&bn1, &bn0) == 0)
+#endif
             return "0";
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         while (BN_cmp(&bn, &bn0) > 0)
+#else
+        while (BN_cmp(&bn1, &bn0) > 0)
+#endif
         {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
             if (!BN_div(&dv, &rem, &bn, &bnBase, pctx))
+#else
+            if (!BN_div(&dv, &rem, &bn1, &bnBase, pctx))
+#endif
                 throw bignum_error("CBigNum::ToString() : BN_div failed");
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
             bn = dv;
+#else
+            bn1 = dv;
+#endif
             unsigned int c = rem.getulong();
             str += "0123456789abcdef"[c];
         }
-        
+
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         if (BN_is_negative(this))
+#else
+        if (BN_is_negative(bn))
+#endif
             str += "-";
         reverse(str.begin(), str.end());
         return str;
@@ -445,9 +604,15 @@ public:
     CBigNum pow(const CBigNum& e) const {
         CAutoBN_CTX pctx;
         CBigNum ret;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         if (!BN_exp(&ret, this, &e, pctx))
             throw bignum_error("CBigNum::pow : BN_exp failed");
         return ret;
+#else
+        if (!BN_exp(&ret, bn, &e, pctx))
+            throw bignum_error("CBigNum::pow : BN_exp failed");
+        return ret;
+#endif
     }
 
     /**
@@ -458,9 +623,15 @@ public:
     CBigNum mul_mod(const CBigNum& b, const CBigNum& m) const {
         CAutoBN_CTX pctx;
         CBigNum ret;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         if (!BN_mod_mul(&ret, this, &b, &m, pctx))
             throw bignum_error("CBigNum::mul_mod : BN_mod_mul failed");
-        
+#else
+        if (!BN_mod_mul(&ret, bn, &b, &m, pctx))
+            throw bignum_error("CBigNum::mul_mod : BN_mod_mul failed");
+
+#endif
+
         return ret;
     }
 
@@ -479,7 +650,11 @@ public:
             if (!BN_mod_exp(&ret, &inv, &posE, &m, pctx))
                 throw bignum_error("CBigNum::pow_mod: BN_mod_exp failed on negative exponent");
         }else
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
             if (!BN_mod_exp(&ret, this, &e, &m, pctx))
+#else
+            if (!BN_mod_exp(&ret, bn, &e, &m, pctx))
+#endif
                 throw bignum_error("CBigNum::pow_mod : BN_mod_exp failed");
 
         return ret;
@@ -494,7 +669,11 @@ public:
     CBigNum inverse(const CBigNum& m) const {
         CAutoBN_CTX pctx;
         CBigNum ret;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         if (!BN_mod_inverse(&ret, this, &m, pctx))
+#else
+        if (!BN_mod_inverse(&ret, bn, &m, pctx))
+#endif
             throw bignum_error("CBigNum::inverse*= :BN_mod_inverse");
         return ret;
     }
@@ -521,7 +700,11 @@ public:
     CBigNum gcd( const CBigNum& b) const{
         CAutoBN_CTX pctx;
         CBigNum ret;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         if (!BN_gcd(&ret, this, &b, pctx))
+#else
+        if (!BN_gcd(&ret, bn, &b, pctx))
+#endif
             throw bignum_error("CBigNum::gcd*= :BN_gcd");
         return ret;
     }
@@ -534,7 +717,11 @@ public:
     */
     bool isPrime(const int checks=BN_prime_checks) const {
         CAutoBN_CTX pctx;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         int ret = BN_is_prime(this, checks, NULL, pctx, NULL);
+#else
+        int ret = BN_is_prime_ex(bn, checks, pctx, NULL);
+#endif
         if(ret < 0){
             throw bignum_error("CBigNum::isPrime :BN_is_prime");
         }
@@ -542,18 +729,30 @@ public:
     }
 
     bool isOne() const {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         return BN_is_one(this);
+#else
+        return BN_is_one(bn);
+#endif
     }
 
 
     bool operator!() const
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         return BN_is_zero(this);
+#else
+        return BN_is_zero(bn);
+#endif
     }
 
     CBigNum& operator+=(const CBigNum& b)
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         if (!BN_add(this, this, &b))
+#else
+        if (!BN_add(bn, bn, &b))
+#endif
             throw bignum_error("CBigNum::operator+= : BN_add failed");
         return *this;
     }
@@ -567,7 +766,11 @@ public:
     CBigNum& operator*=(const CBigNum& b)
     {
         CAutoBN_CTX pctx;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         if (!BN_mul(this, this, &b, pctx))
+#else
+        if (!BN_mul(bn, bn, &b, pctx))
+#endif
             throw bignum_error("CBigNum::operator*= : BN_mul failed");
         return *this;
     }
@@ -586,7 +789,11 @@ public:
 
     CBigNum& operator<<=(unsigned int shift)
     {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         if (!BN_lshift(this, this, shift))
+#else
+        if (!BN_lshift(bn, bn, shift))
+#endif
             throw bignum_error("CBigNum:operator<<= : BN_lshift failed");
         return *this;
     }
@@ -597,13 +804,21 @@ public:
         //   if built on ubuntu 9.04 or 9.10, probably depends on version of OpenSSL
         CBigNum a = 1;
         a <<= shift;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         if (BN_cmp(&a, this) > 0)
+#else
+        if (BN_cmp(&a, bn) > 0)
+#endif
         {
             *this = 0;
             return *this;
         }
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         if (!BN_rshift(this, this, shift))
+#else
+        if (!BN_rshift(bn, bn, shift))
+#endif
             throw bignum_error("CBigNum:operator>>= : BN_rshift failed");
         return *this;
     }
@@ -612,7 +827,11 @@ public:
     CBigNum& operator++()
     {
         // prefix operator
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         if (!BN_add(this, this, BN_value_one()))
+#else
+        if (!BN_add(bn, bn, BN_value_one()))
+#endif
             throw bignum_error("CBigNum::operator++ : BN_add failed");
         return *this;
     }
@@ -629,7 +848,11 @@ public:
     {
         // prefix operator
         CBigNum r;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         if (!BN_sub(&r, this, BN_value_one()))
+#else
+        if (!BN_sub(&r, bn, BN_value_one()))
+#endif
             throw bignum_error("CBigNum::operator-- : BN_sub failed");
         *this = r;
         return *this;
diff --git a/src/crypter.cpp b/src/crypter.cpp
index f2175821..b5b1a08f 100644
--- a/src/crypter.cpp
+++ b/src/crypter.cpp
@@ -10,6 +10,7 @@
 #include <string>
 #include <vector>
 #include <boost/foreach.hpp>
+#include <openssl/opensslv.h>     // For using openssl 1.0 and 1.1 branches.
 #include <openssl/aes.h>
 #include <openssl/evp.h>
 #ifdef WIN32
@@ -73,15 +74,28 @@ bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned
     int nCLen = nLen + AES_BLOCK_SIZE, nFLen = 0;
     vchCiphertext = std::vector<unsigned char> (nCLen);
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     EVP_CIPHER_CTX ctx;
+#else
+    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
+#endif
 
     bool fOk = true;
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     EVP_CIPHER_CTX_init(&ctx);
     if (fOk) fOk = EVP_EncryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, chKey, chIV);
     if (fOk) fOk = EVP_EncryptUpdate(&ctx, &vchCiphertext[0], &nCLen, &vchPlaintext[0], nLen);
     if (fOk) fOk = EVP_EncryptFinal_ex(&ctx, (&vchCiphertext[0])+nCLen, &nFLen);
     EVP_CIPHER_CTX_cleanup(&ctx);
+#else
+    EVP_CIPHER_CTX_init(ctx);
+    if (fOk) fOk = EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, chKey, chIV);
+    if (fOk) fOk = EVP_EncryptUpdate(ctx, &vchCiphertext[0], &nCLen, &vchPlaintext[0], nLen);
+    if (fOk) fOk = EVP_EncryptFinal_ex(ctx, (&vchCiphertext[0])+nCLen, &nFLen);
+    EVP_CIPHER_CTX_free(ctx);
+#endif
+
 
     if (!fOk) return false;
 
@@ -100,15 +114,27 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM
 
     vchPlaintext = CKeyingMaterial(nPLen);
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     EVP_CIPHER_CTX ctx;
+#else
+    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
+#endif
 
     bool fOk = true;
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     EVP_CIPHER_CTX_init(&ctx);
     if (fOk) fOk = EVP_DecryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, chKey, chIV);
     if (fOk) fOk = EVP_DecryptUpdate(&ctx, &vchPlaintext[0], &nPLen, &vchCiphertext[0], nLen);
     if (fOk) fOk = EVP_DecryptFinal_ex(&ctx, (&vchPlaintext[0])+nPLen, &nFLen);
     EVP_CIPHER_CTX_cleanup(&ctx);
+#else
+    EVP_CIPHER_CTX_init(ctx);
+    if (fOk) fOk = EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, chKey, chIV);
+    if (fOk) fOk = EVP_DecryptUpdate(ctx, &vchPlaintext[0], &nPLen, &vchCiphertext[0], nLen);
+    if (fOk) fOk = EVP_DecryptFinal_ex(ctx, (&vchPlaintext[0])+nPLen, &nFLen);
+    EVP_CIPHER_CTX_free(ctx);
+#endif
 
     if (!fOk) return false;
 
diff --git a/src/eckey.cpp b/src/eckey.cpp
index fd4d0374..1f8db219 100644
--- a/src/eckey.cpp
+++ b/src/eckey.cpp
@@ -70,6 +70,14 @@ int ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned ch
     int n = 0;
     int i = recid / 2;
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    const BIGNUM *r;
+    const BIGNUM *s;
+    r = BN_new();
+    s = BN_new();
+    ECDSA_SIG_get0(ecsig, &r, &s);
+#endif
+
     const EC_GROUP *group = EC_KEY_get0_group(eckey);
     if ((ctx = BN_CTX_new()) == NULL) { ret = -1; goto err; }
     BN_CTX_start(ctx);
@@ -78,7 +86,11 @@ int ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned ch
     x = BN_CTX_get(ctx);
     if (!BN_copy(x, order)) { ret=-1; goto err; }
     if (!BN_mul_word(x, i)) { ret=-1; goto err; }
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     if (!BN_add(x, x, ecsig->r)) { ret=-1; goto err; }
+#else
+    if (!BN_add(x, x, r)) { ret=-1; goto err; }
+#endif
     field = BN_CTX_get(ctx);
     if (!EC_GROUP_get_curve_GFp(group, field, NULL, NULL, ctx)) { ret=-2; goto err; }
     if (BN_cmp(x, field) >= 0) { ret=0; goto err; }
@@ -99,9 +111,17 @@ int ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned ch
     if (!BN_zero(zero)) { ret=-1; goto err; }
     if (!BN_mod_sub(e, zero, e, order, ctx)) { ret=-1; goto err; }
     rr = BN_CTX_get(ctx);
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     if (!BN_mod_inverse(rr, ecsig->r, order, ctx)) { ret=-1; goto err; }
+#else
+    if (!BN_mod_inverse(rr, r, order, ctx)) { ret=-1; goto err; }
+#endif
     sor = BN_CTX_get(ctx);
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     if (!BN_mod_mul(sor, ecsig->s, rr, order, ctx)) { ret=-1; goto err; }
+#else
+    if (!BN_mod_mul(sor, s, rr, order, ctx)) { ret=-1; goto err; }
+#endif
     eor = BN_CTX_get(ctx);
     if (!BN_mod_mul(eor, e, rr, order, ctx)) { ret=-1; goto err; }
     if (!EC_POINT_mul(group, Q, eor, R, sor, ctx)) { ret=-2; goto err; }
@@ -134,11 +154,19 @@ void CECKey::GetSecretBytes(unsigned char vch[32]) const
 
 void CECKey::SetSecretBytes(const unsigned char vch[32])
 {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     BIGNUM bn;
     BN_init(&bn);
     assert(BN_bin2bn(vch, 32, &bn));
     assert(EC_KEY_regenerate_key(pkey, &bn));
     BN_clear_free(&bn);
+#else
+    BIGNUM *bn;
+    bn = BN_secure_new();
+    assert(BN_bin2bn(vch, 32, bn));
+    assert(EC_KEY_regenerate_key(pkey, bn));
+    BN_clear_free(bn);
+#endif
 }
 
 void CECKey::GetPrivKey(CPrivKey &privkey, bool fCompressed) {
@@ -194,10 +222,25 @@ bool CECKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig) {
     BIGNUM *halforder = BN_CTX_get(ctx);
     EC_GROUP_get_order(group, order, ctx);
     BN_rshift1(halforder, order);
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     if (BN_cmp(sig->s, halforder) > 0) {
         // enforce low S values, by negating the value (modulo the order) if above order/2.
         BN_sub(sig->s, order, sig->s);
     }
+#else
+    const BIGNUM *r;
+    const BIGNUM *s;
+    r = BN_secure_new();
+    s = BN_secure_new();
+    ECDSA_SIG_get0(sig, &r, &s);
+    BIGNUM *s1;
+    s1 = BN_secure_new();
+    BN_copy(s1,s);
+    if (BN_cmp(s, halforder) > 0) {
+        // enforce low S values, by negating the value (modulo the order) if above order/2.
+        BN_sub(s1, order, s1);
+    }
+#endif
     BN_CTX_end(ctx);
     BN_CTX_free(ctx);
     unsigned int nSize = ECDSA_size(pkey);
@@ -222,8 +265,18 @@ bool CECKey::SignCompact(const uint256 &hash, unsigned char *p64, int &rec) {
     if (sig==NULL)
         return false;
     memset(p64, 0, 64);
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     int nBitsR = BN_num_bits(sig->r);
     int nBitsS = BN_num_bits(sig->s);
+#else
+    const BIGNUM *r;
+    const BIGNUM *s;
+    r = BN_secure_new();
+    s = BN_secure_new();
+    ECDSA_SIG_get0(sig, &r, &s);
+    int nBitsR = BN_num_bits(r);
+    int nBitsS = BN_num_bits(s);
+#endif
     if (nBitsR <= 256 && nBitsS <= 256) {
         CPubKey pubkey;
         GetPubKey(pubkey, true);
@@ -240,8 +293,13 @@ bool CECKey::SignCompact(const uint256 &hash, unsigned char *p64, int &rec) {
             }
         }
         assert(fOk);
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         BN_bn2bin(sig->r,&p64[32-(nBitsR+7)/8]);
         BN_bn2bin(sig->s,&p64[64-(nBitsS+7)/8]);
+#else
+        BN_bn2bin(r,&p64[32-(nBitsR+7)/8]);
+        BN_bn2bin(s,&p64[64-(nBitsS+7)/8]);
+#endif
     }
     ECDSA_SIG_free(sig);
     return fOk;
@@ -256,8 +314,20 @@ bool CECKey::Recover(const uint256 &hash, const unsigned char *p64, int rec)
     if (rec<0 || rec>=3)
         return false;
     ECDSA_SIG *sig = ECDSA_SIG_new();
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     BN_bin2bn(&p64[0],  32, sig->r);
     BN_bin2bn(&p64[32], 32, sig->s);
+#else
+    const BIGNUM *r;
+    const BIGNUM *s;
+    r = BN_secure_new();
+    s = BN_secure_new();
+    BIGNUM *r1;
+    BIGNUM *s1;
+    ECDSA_SIG_get0(sig, &r, &s);
+    BN_bin2bn(&p64[0],  32, r1);
+    BN_bin2bn(&p64[32], 32, s1);
+#endif
     bool ret = ECDSA_SIG_recover_key_GFp(pkey, sig, (unsigned char*)&hash, sizeof(hash), rec, 0) == 1;
     ECDSA_SIG_free(sig);
     return ret;
diff --git a/src/eckey.h b/src/eckey.h
index 4714d493..a5f83da6 100644
--- a/src/eckey.h
+++ b/src/eckey.h
@@ -7,6 +7,7 @@
 #ifndef CEC_KEY_H
 #define CEC_KEY_H
 
+#include <openssl/opensslv.h>  // For using openssl 1.0 and 1.1 branches.
 #include <openssl/bn.h>
 #include <openssl/ecdsa.h>
 #include <openssl/rand.h>
diff --git a/src/smessage.cpp b/src/smessage.cpp
index 0fd02a9a..2a925538 100644
--- a/src/smessage.cpp
+++ b/src/smessage.cpp
@@ -114,15 +114,27 @@ bool SecMsgCrypter::Encrypt(uint8_t* chPlaintext, uint32_t nPlain, std::vector<u
     int nCLen = nLen + AES_BLOCK_SIZE, nFLen = 0;
     vchCiphertext = std::vector<uint8_t> (nCLen);
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     EVP_CIPHER_CTX ctx;
+#else
+    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
+#endif
 
     bool fOk = true;
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     EVP_CIPHER_CTX_init(&ctx);
     if (fOk) fOk = EVP_EncryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, &chKey[0], &chIV[0]);
     if (fOk) fOk = EVP_EncryptUpdate(&ctx, &vchCiphertext[0], &nCLen, chPlaintext, nLen);
     if (fOk) fOk = EVP_EncryptFinal_ex(&ctx, (&vchCiphertext[0])+nCLen, &nFLen);
     EVP_CIPHER_CTX_cleanup(&ctx);
+#else
+    EVP_CIPHER_CTX_init(ctx);
+    if (fOk) fOk = EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, &chKey[0], &chIV[0]);
+    if (fOk) fOk = EVP_EncryptUpdate(ctx, &vchCiphertext[0], &nCLen, chPlaintext, nLen);
+    if (fOk) fOk = EVP_EncryptFinal_ex(ctx, (&vchCiphertext[0])+nCLen, &nFLen);
+    EVP_CIPHER_CTX_free(ctx);
+#endif
 
     if (!fOk)
         return false;
@@ -142,15 +154,27 @@ bool SecMsgCrypter::Decrypt(uint8_t* chCiphertext, uint32_t nCipher, std::vector
 
     vchPlaintext.resize(nCipher);
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     EVP_CIPHER_CTX ctx;
+#else
+    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
+#endif
 
     bool fOk = true;
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     EVP_CIPHER_CTX_init(&ctx);
     if (fOk) fOk = EVP_DecryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, &chKey[0], &chIV[0]);
     if (fOk) fOk = EVP_DecryptUpdate(&ctx, &vchPlaintext[0], &nPLen, &chCiphertext[0], nCipher);
     if (fOk) fOk = EVP_DecryptFinal_ex(&ctx, (&vchPlaintext[0])+nPLen, &nFLen);
     EVP_CIPHER_CTX_cleanup(&ctx);
+#else
+    EVP_CIPHER_CTX_init(ctx);
+    if (fOk) fOk = EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, &chKey[0], &chIV[0]);
+    if (fOk) fOk = EVP_DecryptUpdate(ctx, &vchPlaintext[0], &nPLen, &chCiphertext[0], nCipher);
+    if (fOk) fOk = EVP_DecryptFinal_ex(ctx, (&vchPlaintext[0])+nPLen, &nFLen);
+    EVP_CIPHER_CTX_free(ctx);
+#endif
 
     if (!fOk)
         return false;
@@ -3139,15 +3163,19 @@ int SecureMsgValidate(uint8_t *pHeader, uint8_t *pPayload, uint32_t nPayload)
     for (int i = 0; i < 32; i+=4)
         memcpy(civ+i, &nonse, 4);
 
-    HMAC_CTX ctx;
-    HMAC_CTX_init(&ctx);
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    HMAC_CTX *ctx = HMAC_CTX_new();
+#else
+    HMAC_CTX *ctx = new HMAC_CTX();
+    HMAC_CTX_init(ctx);
+#endif
 
     uint32_t nBytes;
-    if (!HMAC_Init_ex(&ctx, &civ[0], 32, EVP_sha256(), NULL)
-        || !HMAC_Update(&ctx, (uint8_t*) pHeader+4, SMSG_HDR_LEN-4)
-        || !HMAC_Update(&ctx, (uint8_t*) pPayload, nPayload)
-        || !HMAC_Update(&ctx, pPayload, nPayload)
-        || !HMAC_Final(&ctx, sha256Hash, &nBytes)
+    if (!HMAC_Init_ex(ctx, &civ[0], 32, EVP_sha256(), NULL)
+        || !HMAC_Update(ctx, (uint8_t*) pHeader+4, SMSG_HDR_LEN-4)
+        || !HMAC_Update(ctx, (uint8_t*) pPayload, nPayload)
+        || !HMAC_Update(ctx, pPayload, nPayload)
+        || !HMAC_Final(ctx, sha256Hash, &nBytes)
         || nBytes != 32)
     {
         if (fDebugSmsg)
@@ -3171,7 +3199,12 @@ int SecureMsgValidate(uint8_t *pHeader, uint8_t *pPayload, uint32_t nPayload)
             rv = 3; // checksum mismatch
         }
     }
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    HMAC_CTX_free(ctx);
+#else
     HMAC_CTX_cleanup(&ctx);
+    delete ctx;
+#endif
 
     return rv;
 };
@@ -3196,8 +3229,13 @@ int SecureMsgSetHash(uint8_t *pHeader, uint8_t *pPayload, uint32_t nPayload)
     uint8_t sha256Hash[32];
 
     bool found = false;
-    HMAC_CTX ctx;
-    HMAC_CTX_init(&ctx);
+
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    HMAC_CTX *ctx = HMAC_CTX_new();
+#else
+    HMAC_CTX *ctx = new HMAC_CTX();
+    HMAC_CTX_init(ctx);
+#endif
 
     uint32_t nonse = 0;
 
@@ -3218,12 +3256,12 @@ int SecureMsgSetHash(uint8_t *pHeader, uint8_t *pPayload, uint32_t nPayload)
             memcpy(civ+i, &nonse, 4);
 
         uint32_t nBytes;
-        if (!HMAC_Init_ex(&ctx, &civ[0], 32, EVP_sha256(), NULL)
-            || !HMAC_Update(&ctx, (uint8_t*) pHeader+4, SMSG_HDR_LEN-4)
-            || !HMAC_Update(&ctx, (uint8_t*) pPayload, nPayload)
-            || !HMAC_Update(&ctx, pPayload, nPayload)
-            || !HMAC_Final(&ctx, sha256Hash, &nBytes)
-            //|| !HMAC_Final(&ctx, &vchHash[0], &nBytes)
+        if (!HMAC_Init_ex(ctx, &civ[0], 32, EVP_sha256(), NULL)
+            || !HMAC_Update(ctx, (uint8_t*) pHeader+4, SMSG_HDR_LEN-4)
+            || !HMAC_Update(ctx, (uint8_t*) pPayload, nPayload)
+            || !HMAC_Update(ctx, pPayload, nPayload)
+            || !HMAC_Final(ctx, sha256Hash, &nBytes)
+            //|| !HMAC_Final(ctx, &vchHash[0], &nBytes)
             || nBytes != 32)
             break;
 
@@ -3259,7 +3297,12 @@ int SecureMsgSetHash(uint8_t *pHeader, uint8_t *pPayload, uint32_t nPayload)
         nonse++;
     };
 
-    HMAC_CTX_cleanup(&ctx);
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    HMAC_CTX_free(ctx);
+#else
+    HMAC_CTX_cleanup(ctx);
+    delete ctx;
+#endif
 
     if (!fSecMsgEnabled)
     {
@@ -3407,7 +3450,11 @@ int SecureMsgEncrypt(SecureMessage& smsg, std::string& addressFrom, std::string&
     //LogPrintf("secret_len %d.\n", secret_len);
 
     // -- ECDH_compute_key returns the same P if fed compressed or uncompressed public keys
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    EC_KEY_set_method(pkeyr, EC_KEY_OpenSSL());
+#else
     ECDH_set_method(pkeyr, ECDH_OpenSSL());
+#endif
     int lenP = ECDH_compute_key(&vchP[0], 32, EC_KEY_get0_public_key(pkeyK), pkeyr, NULL);
 
     if (lenP != 32)
@@ -3539,17 +3586,26 @@ int SecureMsgEncrypt(SecureMessage& smsg, std::string& addressFrom, std::string&
     //    Message authentication code, (hash of timestamp + destination + payload)
     bool fHmacOk = true;
     uint32_t nBytes = 32;
-    HMAC_CTX ctx;
-    HMAC_CTX_init(&ctx);
-
-    if (!HMAC_Init_ex(&ctx, &key_m[0], 32, EVP_sha256(), NULL)
-        || !HMAC_Update(&ctx, (uint8_t*) &smsg.timestamp, sizeof(smsg.timestamp))
-        || !HMAC_Update(&ctx, &vchCiphertext[0], vchCiphertext.size())
-        || !HMAC_Final(&ctx, smsg.mac, &nBytes)
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    HMAC_CTX *ctx = HMAC_CTX_new();
+#else
+    HMAC_CTX *ctx = new HMAC_CTX();
+    HMAC_CTX_init(ctx);
+#endif
+
+    if (!HMAC_Init_ex(ctx, &key_m[0], 32, EVP_sha256(), NULL)
+        || !HMAC_Update(ctx, (uint8_t*) &smsg.timestamp, sizeof(smsg.timestamp))
+        || !HMAC_Update(ctx, &vchCiphertext[0], vchCiphertext.size())
+        || !HMAC_Final(ctx, smsg.mac, &nBytes)
         || nBytes != 32)
         fHmacOk = false;
 
-    HMAC_CTX_cleanup(&ctx);
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    HMAC_CTX_free(ctx);
+#else
+    HMAC_CTX_cleanup(ctx);
+    delete ctx;
+#endif
 
     if (!fHmacOk)
     {
@@ -3812,7 +3868,11 @@ int SecureMsgDecrypt(bool fTestOnly, std::string& address, uint8_t *pHeader, uin
     EC_KEY* pkeyk = ecKeyDest.GetECKey();
     EC_KEY* pkeyR = ecKeyR.GetECKey();
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    EC_KEY_set_method(pkeyk, EC_KEY_OpenSSL());
+#else
     ECDH_set_method(pkeyk, ECDH_OpenSSL());
+#endif
     int lenPdec = ECDH_compute_key(&vchP[0], 32, EC_KEY_get0_public_key(pkeyR), pkeyk, NULL);
 
     if (lenPdec != 32)
@@ -3835,17 +3895,26 @@ int SecureMsgDecrypt(bool fTestOnly, std::string& address, uint8_t *pHeader, uin
     uint8_t MAC[32];
     bool fHmacOk = true;
     uint32_t nBytes = 32;
-    HMAC_CTX ctx;
-    HMAC_CTX_init(&ctx);
-
-    if (!HMAC_Init_ex(&ctx, &key_m[0], 32, EVP_sha256(), NULL)
-        || !HMAC_Update(&ctx, (uint8_t*) &psmsg->timestamp, sizeof(psmsg->timestamp))
-        || !HMAC_Update(&ctx, pPayload, nPayload)
-        || !HMAC_Final(&ctx, MAC, &nBytes)
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    HMAC_CTX *ctx = HMAC_CTX_new();
+#else
+    HMAC_CTX *ctx = new HMAC_CTX();
+    HMAC_CTX_init(ctx);
+#endif
+
+    if (!HMAC_Init_ex(ctx, &key_m[0], 32, EVP_sha256(), NULL)
+        || !HMAC_Update(ctx, (uint8_t*) &psmsg->timestamp, sizeof(psmsg->timestamp))
+        || !HMAC_Update(ctx, pPayload, nPayload)
+        || !HMAC_Final(ctx, MAC, &nBytes)
         || nBytes != 32)
         fHmacOk = false;
 
-    HMAC_CTX_cleanup(&ctx);
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    HMAC_CTX_free(ctx);
+#else
+    HMAC_CTX_cleanup(ctx);
+    delete ctx;
+#endif
 
     if (!fHmacOk)
     {
