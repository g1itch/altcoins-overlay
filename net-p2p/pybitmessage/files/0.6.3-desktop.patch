diff --git a/desktop/pybitmessage.desktop b/desktop/pybitmessage.desktop
index 05970440..c30276e4 100644
--- a/desktop/pybitmessage.desktop
+++ b/desktop/pybitmessage.desktop
@@ -6,4 +6,4 @@ Comment=Send encrypted messages
 Exec=pybitmessage %F
 Icon=pybitmessage
 Terminal=false
-Categories=Office;Email;
+Categories=Office;Email;Network;
diff --git a/setup.py b/setup.py
index 3e585b6b..ccaab48a 100644
--- a/setup.py
+++ b/setup.py
@@ -17,7 +17,8 @@ EXTRAS_REQUIRE = {
     'qrcode': ['qrcode'],
     'sound;platform_system=="Windows"': ['winsound'],
     'tor': ['stem'],
-    'docs': ['sphinx', 'sphinxcontrib-apidoc', 'm2r']
+    'docs': ['sphinx', 'sphinxcontrib-apidoc', 'm2r'],
+    'xdg': ['pyxdg']
 }
 
 
@@ -141,6 +142,9 @@ if __name__ == "__main__":
                 'libmessaging ='
                 'pybitmessage.plugins.indicator_libmessaging [gir]'
             ],
+            'bitmessage.desktop': [
+                'freedesktop = pybitmessage.plugins.desktop_xdg [xdg]'
+            ],
             'bitmessage.proxyconfig': [
                 'stem = pybitmessage.plugins.proxyconfig_stem [tor]'
             ],
diff --git a/src/bitmessageqt/__init__.py b/src/bitmessageqt/__init__.py
index 2f1a6e7f..2fd6b341 100644
--- a/src/bitmessageqt/__init__.py
+++ b/src/bitmessageqt/__init__.py
@@ -639,8 +639,6 @@ class MyForm(settingsmixin.SMainWindow):
                     BMConfigParser().remove_section(addressInKeysFile)
                     BMConfigParser().save()
 
-        self.updateStartOnLogon()
-
         self.change_translation()
 
         # e.g. for editing labels
@@ -825,6 +823,7 @@ class MyForm(settingsmixin.SMainWindow):
         self.sqlInit()
         self.indicatorInit()
         self.notifierInit()
+        self.updateStartOnLogon()
 
         self.ui.updateNetworkSwitchMenuLabel()
 
@@ -843,26 +842,25 @@ class MyForm(settingsmixin.SMainWindow):
             self._contact_selected = None
 
     def updateStartOnLogon(self):
-        # Configure Bitmessage to start on startup (or remove the
-        # configuration) based on the setting in the keys.dat file
+        """
+        Configure Bitmessage to start on startup (or remove the
+        configuration) based on the setting in the keys.dat file
+        """
+        startonlogon = BMConfigParser().safeGetBoolean(
+            'bitmessagesettings', 'startonlogon')
         if 'win32' in sys.platform or 'win64' in sys.platform:
             # Auto-startup for Windows
             RUN_PATH = "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run"
-            self.settings = QtCore.QSettings(
+            settings = QtCore.QSettings(
                 RUN_PATH, QtCore.QSettings.NativeFormat)
             # In case the user moves the program and the registry entry is
             # no longer valid, this will delete the old registry entry.
-            self.settings.remove("PyBitmessage")
-            if BMConfigParser().getboolean(
-                    'bitmessagesettings', 'startonlogon'
-            ):
-                self.settings.setValue("PyBitmessage", sys.argv[0])
-        elif 'darwin' in sys.platform:
-            # startup for mac
-            pass
-        elif 'linux' in sys.platform:
-            # startup for linux
-            pass
+            if startonlogon:
+                settings.setValue("PyBitmessage", sys.argv[0])
+            else:
+                settings.remove("PyBitmessage")
+        elif self.desktop:
+            self.desktop.adjust_startonlogon(startonlogon)
 
     def updateTTL(self, sliderPosition):
         TTL = int(sliderPosition ** 3.199 + 3600)
@@ -1422,12 +1420,21 @@ class MyForm(settingsmixin.SMainWindow):
     def sqlInit(self):
         register_adapter(QtCore.QByteArray, str)
 
-    # Try init the distro specific appindicator,
-    # for example the Ubuntu MessagingMenu
     def indicatorInit(self):
+        """
+        Try init the distro specific appindicator,
+        for example the Ubuntu MessagingMenu
+        """
         def _noop_update(*args, **kwargs):
             pass
 
+        # get desktop plugin if any
+        if 'win' not in sys.platform:
+            try:
+                self.desktop = get_plugin('desktop')()
+            except TypeError:
+                self.desktop = False
+
         try:
             self.indicatorUpdate = get_plugin('indicator')(self)
         except (NameError, TypeError):
diff --git a/src/bitmessageqt/settings.py b/src/bitmessageqt/settings.py
index 32681b57..71ff11ad 100644
--- a/src/bitmessageqt/settings.py
+++ b/src/bitmessageqt/settings.py
@@ -117,9 +117,6 @@ class SettingsDialog(QtGui.QDialog):
                 self.checkBoxPortableMode.setDisabled(True)
 
         if 'darwin' in sys.platform:
-            self.checkBoxStartOnLogon.setDisabled(True)
-            self.checkBoxStartOnLogon.setText(_translate(
-                "MainWindow", "Start-on-login not yet supported on your OS."))
             self.checkBoxMinimizeToTray.setDisabled(True)
             self.checkBoxMinimizeToTray.setText(_translate(
                 "MainWindow",
@@ -128,10 +125,12 @@ class SettingsDialog(QtGui.QDialog):
             self.checkBoxShowTrayNotifications.setText(_translate(
                 "MainWindow",
                 "Tray notifications not yet supported on your OS."))
-        elif 'linux' in sys.platform:
+
+        if 'win' not in sys.platform and not self.parent.desktop:
             self.checkBoxStartOnLogon.setDisabled(True)
             self.checkBoxStartOnLogon.setText(_translate(
                 "MainWindow", "Start-on-login not yet supported on your OS."))
+
         # On the Network settings tab:
         self.lineEditTCPPort.setText(str(
             config.get('bitmessagesettings', 'port')))
diff --git a/src/plugins/desktop_xdg.py b/src/plugins/desktop_xdg.py
new file mode 100644
index 00000000..3dbd212f
--- /dev/null
+++ b/src/plugins/desktop_xdg.py
@@ -0,0 +1,31 @@
+# -*- coding: utf-8 -*-
+
+import os
+
+from xdg import BaseDirectory, Menu
+
+
+class DesktopXDG(object):
+    """pyxdg Freedesktop desktop implementation"""
+    def __init__(self):
+        menu_entry = Menu.parse().getMenu('Office').getMenuEntry(
+            'pybitmessage.desktop')
+        self.desktop = menu_entry.DesktopEntry if menu_entry else None
+
+    def adjust_startonlogon(self, autostart=False):
+        """Configure autostart according to settings"""
+        if not self.desktop:
+            return
+
+        autostart_path = os.path.join(
+            BaseDirectory.xdg_config_home, 'autostart', 'pybitmessage.desktop')
+        if autostart:
+            self.desktop.write(autostart_path)
+        else:
+            try:
+                os.remove(autostart_path)
+            except OSError:
+                pass
+
+
+connect_plugin = DesktopXDG
